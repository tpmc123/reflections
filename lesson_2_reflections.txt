- What happens when you initialize a repository? Why do you need to do it?

You create a git repository for files in that directory. In order to track files, you need to initiate version control on those files.


- How is the staging area different from the working directory and the repository? What value do you think it offers?

it is not a list of all files in the directory, like the working directory. And it's not filled with commits, like the repository. the staging area gives us the choice of which files in the working directory we want committed in the repository. 


- How can you use the staging area to make sure you have one commit per logical change?

you can add one file / logical change to the staging area at a time, commit that change, then repeat for any other logical changes.


- What are some situations when branches would be helpful in keeping your history organized? How would branches help?

branches can help if you want to be developing multiple iterations of code/file at once. i.e. master version, experimental version, easy version (for game), hard version (for game)


- How do the diagrams help you visualize the branch structure?

they put the branch structure in a visualization, making it easier to understand.


- What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Two branches become 1 branch. All changes on both branches included. Diagram shows 2 branches becoming one, or more specifically, one branch merging into another. 


- What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Auto merge is automatic. Fast, no user error from copy/pasting. But it can't resolve conflicts in code that's being merged, so that has to be done manually.